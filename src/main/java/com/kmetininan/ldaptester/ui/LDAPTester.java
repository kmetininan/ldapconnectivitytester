/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.kmetininan.ldaptester.ui;

import com.kmetininan.ldapconnectivitytester.LDAPConnect;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author kamilmetini
 */
public class LDAPTester extends javax.swing.JFrame {

    private Preferences prefs;
    /**
     * Creates new form MainFrame
     */
    public LDAPTester() {
        initComponents();
        prefs = Preferences.userRoot().node(this.getClass().getName());
        
        if(prefs.get("ldap.secure", "0").equals("1")){
            chkLdaps.setSelected(true);
            btnSelect.setEnabled(true);
            txtKeystorePass.setEnabled(true);
        }
        
        txtDomain.setText(prefs.get("ldap.domain",""));
        txtHost.setText(prefs.get("ldap.host",""));
        txtPort.setText(prefs.get("ldap.port",""));
        txtUsername.setText(prefs.get("ldap.username",""));
        txtKeystorePass.setText(prefs.get("ldap.keystore.pass",""));
        txtKeystorePath.setText(prefs.get("ldap.keystore.path",""));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        btnConnect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPass = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        txtHost = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        chkLdaps = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        btnSelect = new javax.swing.JButton();
        txtKeystorePath = new javax.swing.JTextField();
        txtKeystorePass = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtDomain = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLDAPGroups = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();

        jFileChooser1.setDialogTitle("Choose the keystore file.");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LDAP Connectivity Tester by K. Metin INAN");
        setResizable(false);

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        jLabel1.setText("Username:");

        jLabel2.setText("Password:");

        jLabel3.setText("LDAP Host:");

        jLabel4.setText("Port:");

        chkLdaps.setText("Secure LDAP ?");
        chkLdaps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLdapsActionPerformed(evt);
            }
        });

        jLabel6.setText("Keystore:");

        btnSelect.setText("select");
        btnSelect.setEnabled(false);
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        txtKeystorePath.setEditable(false);

        txtKeystorePass.setText("jPasswordField1");
        txtKeystorePass.setEnabled(false);

        jLabel7.setText("Keystore Password:");

        jLabel8.setText("Domain:");

        txtLDAPGroups.setEditable(false);
        txtLDAPGroups.setColumns(20);
        txtLDAPGroups.setRows(5);
        jScrollPane1.setViewportView(txtLDAPGroups);

        jLabel9.setText("LDAP Groups:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(230, 230, 230)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(113, 113, 113))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtKeystorePath)
                            .addComponent(txtKeystorePass))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelect))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDomain)
                            .addComponent(txtUsername)
                            .addComponent(txtHost)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(chkLdaps))
                                    .addComponent(btnConnect))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtPass))
                        .addGap(66, 66, 66))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtDomain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(chkLdaps))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKeystorePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(btnSelect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtKeystorePass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnConnect)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(54, 54, 54))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   

    
    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        StringBuilder errorText = new StringBuilder();
        
        if(txtDomain.getText().length()==0)
        {
            errorText.append("Domain is mandatory\n");
        }
        
        if(txtHost.getText().length()==0)
        {
            errorText.append("Host is mandatory\n");
        }

        if(txtPort.getText().length()==0)
        {
            errorText.append("Port is mandatory\n");
        }else{
            try{
                int portNo = Integer.parseInt(txtPort.getText());
            }catch(NumberFormatException nfe)
            {
                errorText.append("Port is not valid\n");
            }
        }
        
        if(txtUsername.getText().length()==0)
        {
            errorText.append("User is mandatory\n");
        }
        
        
      
        
        if(errorText.length()>0)
        {
            JOptionPane.showMessageDialog(btnConnect, errorText.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String protocol = "ldap";
        if(chkLdaps.isSelected())
        {
            protocol ="ldaps";
        }
        
        boolean isSecure = chkLdaps.isSelected();
        prefs.put("ldap.domain", txtDomain.getText());
        prefs.put("ldap.secure", isSecure ? "1":"0");
        prefs.put("ldap.host", txtHost.getText());
        prefs.put("ldap.port", txtPort.getText());
        prefs.put("ldap.username", txtUsername.getText());
        prefs.put("ldap.keystore.pass", String.valueOf(txtKeystorePass.getPassword()));
        
        String userInfo = LDAPConnect.connect(txtDomain.getText(),protocol+"://"+txtHost.getText(), 
                txtUsername.getText(), String.valueOf(txtPass.getPassword()),isSecure,btnConnect);
  
        txtLDAPGroups.setText(userInfo);
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
       int returnValue = jFileChooser1.showOpenDialog(this);

		if (returnValue == JFileChooser.APPROVE_OPTION) {
			if (jFileChooser1.getSelectedFile().isFile()) {
                                txtKeystorePath.setText(jFileChooser1.getSelectedFile().getAbsolutePath());
                                prefs.put("ldap.keystore.path", jFileChooser1.getSelectedFile().getAbsolutePath());
			}
		}
    }//GEN-LAST:event_btnSelectActionPerformed

    private void chkLdapsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLdapsActionPerformed
        if(chkLdaps.isSelected())
        {
            btnSelect.setEnabled(true);
            txtKeystorePass.setEnabled(true);
        }else{
            btnSelect.setEnabled(false);
            txtKeystorePass.setEnabled(false);
        }
    }//GEN-LAST:event_chkLdapsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LDAPTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LDAPTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LDAPTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LDAPTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LDAPTester().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnSelect;
    private javax.swing.JCheckBox chkLdaps;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtDomain;
    private javax.swing.JTextField txtHost;
    private javax.swing.JPasswordField txtKeystorePass;
    private javax.swing.JTextField txtKeystorePath;
    private javax.swing.JTextArea txtLDAPGroups;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
